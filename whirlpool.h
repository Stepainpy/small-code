#ifndef WHIRLPOOL_HASH_H
#define WHIRLPOOL_HASH_H

#include <stddef.h>

#ifndef WHIRLPOOL_DEF
#define WHIRLPOOL_DEF
#endif

#define WHIRLPOOL_HASH_BYTE_WIDTH 64

#ifndef UINT8_MAX
#  include <limits.h>

#  if UCHAR_MAX == 0xFF
typedef unsigned char uint8_t;
#  else
#    error "Not found 8-bit type"
#  endif

#  if UINT_MAX == 0xFFFFFFFF
typedef unsigned int  uint32_t;
#  elif ULONG_MAX == 0xFFFFFFFF
typedef unsigned long uint32_t;
#  else
#    error "Not found 32-bit type"
#  endif
#endif

typedef struct whpl_state_t {
    uint8_t input[64];
    uint8_t uploaded;
    uint8_t state[64];
    uint32_t length[8];
} whpl_state_t;

typedef struct whpl_hash_t {
    uint8_t bytes[64];
} whpl_hash_t;

#ifdef __cplusplus
extern "C" {
#endif

WHIRLPOOL_DEF void whpl_begin(whpl_state_t* state);
WHIRLPOOL_DEF void whpl_load (whpl_state_t* state, const void* data, size_t size);
WHIRLPOOL_DEF void whpl_end  (whpl_state_t* state, whpl_hash_t* hash);

WHIRLPOOL_DEF void whirlpool(const void* data, size_t size, whpl_hash_t* hash);

#ifdef __cplusplus
}
#endif

#endif /* WHIRLPOOL_HASH_H */

#ifdef WHIRLPOOL_IMPLEMENTATION

#include <string.h>

#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
static uint32_t whpl_bswap(uint32_t n) {
    n = (n & 0xFFFF0000) >> 16 | (n & 0x0000FFFF) << 16;
    n = (n & 0xFF00FF00) >>  8 | (n & 0x00FF00FF) <<  8;
    return n;
}
#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
#  define whpl_bswap(n) (n)
#else
#  error "Unknown endian"
#endif

typedef uint8_t whpl_block_t[64];

static const uint8_t whpl_Sbox[256] = {
    0x18, 0x23, 0xc6, 0xe8, 0x87, 0xb8, 0x01, 0x4f, 0x36, 0xa6, 0xd2, 0xf5, 0x79, 0x6f, 0x91, 0x52,
    0x60, 0xbc, 0x9b, 0x8e, 0xa3, 0x0c, 0x7b, 0x35, 0x1d, 0xe0, 0xd7, 0xc2, 0x2e, 0x4b, 0xfe, 0x57,
    0x15, 0x77, 0x37, 0xe5, 0x9f, 0xf0, 0x4a, 0xda, 0x58, 0xc9, 0x29, 0x0a, 0xb1, 0xa0, 0x6b, 0x85,
    0xbd, 0x5d, 0x10, 0xf4, 0xcb, 0x3e, 0x05, 0x67, 0xe4, 0x27, 0x41, 0x8b, 0xa7, 0x7d, 0x95, 0xd8,
    0xfb, 0xee, 0x7c, 0x66, 0xdd, 0x17, 0x47, 0x9e, 0xca, 0x2d, 0xbf, 0x07, 0xad, 0x5a, 0x83, 0x33,
    0x63, 0x02, 0xaa, 0x71, 0xc8, 0x19, 0x49, 0xd9, 0xf2, 0xe3, 0x5b, 0x88, 0x9a, 0x26, 0x32, 0xb0,
    0xe9, 0x0f, 0xd5, 0x80, 0xbe, 0xcd, 0x34, 0x48, 0xff, 0x7a, 0x90, 0x5f, 0x20, 0x68, 0x1a, 0xae,
    0xb4, 0x54, 0x93, 0x22, 0x64, 0xf1, 0x73, 0x12, 0x40, 0x08, 0xc3, 0xec, 0xdb, 0xa1, 0x8d, 0x3d,
    0x97, 0x00, 0xcf, 0x2b, 0x76, 0x82, 0xd6, 0x1b, 0xb5, 0xaf, 0x6a, 0x50, 0x45, 0xf3, 0x30, 0xef,
    0x3f, 0x55, 0xa2, 0xea, 0x65, 0xba, 0x2f, 0xc0, 0xde, 0x1c, 0xfd, 0x4d, 0x92, 0x75, 0x06, 0x8a,
    0xb2, 0xe6, 0x0e, 0x1f, 0x62, 0xd4, 0xa8, 0x96, 0xf9, 0xc5, 0x25, 0x59, 0x84, 0x72, 0x39, 0x4c,
    0x5e, 0x78, 0x38, 0x8c, 0xd1, 0xa5, 0xe2, 0x61, 0xb3, 0x21, 0x9c, 0x1e, 0x43, 0xc7, 0xfc, 0x04,
    0x51, 0x99, 0x6d, 0x0d, 0xfa, 0xdf, 0x7e, 0x24, 0x3b, 0xab, 0xce, 0x11, 0x8f, 0x4e, 0xb7, 0xeb,
    0x3c, 0x81, 0x94, 0xf7, 0xb9, 0x13, 0x2c, 0xd3, 0xe7, 0x6e, 0xc4, 0x03, 0x56, 0x44, 0x7f, 0xa9,
    0x2a, 0xbb, 0xc1, 0x53, 0xdc, 0x0b, 0x9d, 0x6c, 0x31, 0x74, 0xf6, 0x46, 0xac, 0x89, 0x14, 0xe1,
    0x16, 0x3a, 0x69, 0x09, 0x70, 0xb6, 0xd0, 0xed, 0xcc, 0x42, 0x98, 0xa4, 0x28, 0x5c, 0xf8, 0x86
};

static const uint8_t whpl_exp_tbl[512] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26,
    0x4c, 0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0,
    0x9d, 0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23,
    0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1,
    0x5f, 0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0,
    0xfd, 0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2,
    0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce,
    0x81, 0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc,
    0x85, 0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54,
    0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73,
    0xe6, 0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff,
    0xe3, 0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41,
    0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6,
    0x51, 0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09,
    0x12, 0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16,
    0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x01,
    0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26, 0x4c,
    0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x9d,
    0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23, 0x46,
    0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1, 0x5f,
    0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0, 0xfd,
    0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2, 0xd9,
    0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce, 0x81,
    0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc, 0x85,
    0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54, 0xa8,
    0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73, 0xe6,
    0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff, 0xe3,
    0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41, 0x82,
    0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6, 0x51,
    0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09, 0x12,
    0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16, 0x2c,
    0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x00, 0x00
};

static const uint8_t whpl_log_tbl[256] = {
    0x00, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee, 0x1b, 0x68, 0xc7, 0x4b,
    0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81, 0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71,
    0x05, 0x8a, 0x65, 0x2f, 0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,
    0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78, 0x4d, 0xe4, 0x72, 0xa6,
    0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd, 0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88,
    0x36, 0xd0, 0x94, 0xce, 0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,
    0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54, 0xfa, 0x85, 0xba, 0x3d,
    0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b, 0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57,
    0x07, 0x70, 0xc0, 0xf7, 0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,
    0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9, 0x23, 0x20, 0x89, 0x2e,
    0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd, 0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61,
    0xf2, 0x56, 0xd3, 0xab, 0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,
    0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec, 0x7f, 0x0c, 0x6f, 0xf6,
    0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa, 0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a,
    0xcb, 0x59, 0x5f, 0xb0, 0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,
    0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea, 0xa8, 0x50, 0x58, 0xaf
};

static uint8_t whpl_gf28_mul(uint8_t a, uint8_t b) {
    return (!a || !b) ? 0 : whpl_exp_tbl[whpl_log_tbl[a] + whpl_log_tbl[b]];
}

static void whpl_xor_block(whpl_block_t inout, whpl_block_t right) {
    uint32_t* io_u32 = (uint32_t*)inout;
    uint32_t* rt_u32 = (uint32_t*)right;
    size_t i; for (i = 0; i < 16; i++)
        io_u32[i] ^= rt_u32[i];
}

static void whpl_step_gamma(whpl_block_t inout) {
    size_t i; for (i = 0; i < 64; i++)
        inout[i] = whpl_Sbox[inout[i]];
}

static void whpl_step_pi(whpl_block_t inout) {
    whpl_block_t res; size_t i, j;
    for (i = 0; i < 8; i++)
        for (j = 0; j < 8; j++)
            res[8*((i + j) % 8)+j] = inout[8*i+j];
    memcpy(inout, res, sizeof res);
}

static void whpl_step_theta(whpl_block_t inout) {
    static const whpl_block_t C = {
        1, 1, 4, 1, 8, 5, 2, 9,
        9, 1, 1, 4, 1, 8, 5, 2,
        2, 9, 1, 1, 4, 1, 8, 5,
        5, 2, 9, 1, 1, 4, 1, 8,
        8, 5, 2, 9, 1, 1, 4, 1,
        1, 8, 5, 2, 9, 1, 1, 4,
        4, 1, 8, 5, 2, 9, 1, 1,
        1, 4, 1, 8, 5, 2, 9, 1
    }; whpl_block_t res = {0};
    size_t i, j, k;
    for (i = 0; i < 8; i++)
        for (j = 0; j < 8; j++)
            for (k = 0; k < 8; k++)
                res[8*i+j] ^= whpl_gf28_mul(inout[8*i+k], C[8*k+j]);
    memcpy(inout, res, sizeof res);
}

#define whpl_step_sigma whpl_xor_block

static void whpl_cipher_W(whpl_block_t out, whpl_block_t in, whpl_block_t k0) {
    whpl_block_t state, key; size_t r;
    memcpy(state, in, sizeof state);
    memcpy(key  , k0, sizeof key  );

    whpl_step_sigma(state, k0);
    for (r = 1; r <= 10; r++) {
        whpl_block_t cr = {0};
        memcpy(cr, whpl_Sbox + 8 * (r - 1), 8);

        whpl_step_gamma(key);
        whpl_step_pi   (key);
        whpl_step_theta(key);
        whpl_step_sigma(key, cr);

        whpl_step_gamma(state);
        whpl_step_pi   (state);
        whpl_step_theta(state);
        whpl_step_sigma(state, key);
    }

    memcpy(out, state, sizeof state);
}

static void whpl_round(whpl_state_t* s) {
    whpl_block_t msg, out;
    memcpy(msg, s->input, sizeof msg);
    memset(s->input, 0, sizeof s->input);
    s->uploaded = 0;

    whpl_cipher_W(out, msg, s->state);
    whpl_xor_block(s->state, out);
    whpl_xor_block(s->state, msg);
}

void whpl_begin(whpl_state_t* s) {
    if (s) memset(s, 0, sizeof *s);
}

void whpl_load(whpl_state_t* s, const void* data, size_t size) {
    size_t cap, min, i; uint32_t prev, carry;
    if (!s || (!data && size > 0)) return;
    while (size > 0) {
        cap = sizeof s->input - s->uploaded;
        min = size < cap ? size : cap;
        memcpy(s->input + s->uploaded, data, min);

        data = (char*)data + min;
        s->uploaded += min;
        size -= min;

        prev = s->length[0];
        s->length[0] += min * 8;
        carry = s->length[0] < prev;
        for (i = 1; carry && i < 8; i++) {
            prev = s->length[i];
            carry = ++(s->length[i]) < prev;
        }

        if (s->uploaded >= sizeof s->input)
            whpl_round(s);
    }
}

void whpl_end(whpl_state_t* s, whpl_hash_t* h) {
    size_t i; uint32_t* in32;
    if (!s || !h) return;

    s->input[s->uploaded++] = 0x80;
    if (s->uploaded > 32) whpl_round(s);

    in32 = (uint32_t*)s->input;
    for (i = 0; i < 8; i++)
        in32[15 - i] = whpl_bswap(s->length[i]);
    whpl_round(s);

    memcpy(h->bytes, s->state, sizeof h->bytes);
}

void whirlpool(const void* data, size_t size, whpl_hash_t* hash) {
    whpl_state_t s;
    whpl_begin(&s);
    whpl_load(&s, data, size);
    whpl_end(&s, hash);
}

#endif /* WHIRLPOOL_IMPLEMENTATION */